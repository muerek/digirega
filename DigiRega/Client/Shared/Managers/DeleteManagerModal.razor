@inject IManagerService ManagerService
@inject IClubService ClubService

@if (manager == null || club == null)
{
    <LoadingSpinner />
}
else
{
    <p>
        Diesen Obmensch wirklich löschen?
    </p>
    <ul>
        <li>Verein: @club.Name</li>
        <li>Name: @manager.FirstName @manager.LastName</li>
        <li>Email-Adresse: @manager.EmailAddress</li>
    </ul>
    <p>
        <button type="button" class="btn btn-danger" @onclick="DeleteManagerAsync">Löschen</button>
        <button type="button" class="btn btn-secondary" @onclick="async () => await Modal.CancelAsync()">Abbrechen</button>
    </p>
}

@code {
    [CascadingParameter]
    BlazoredModalInstance Modal { get; set; } = null!;

    [CascadingParameter]
    ErrorHandler ErrorHandler { get; set; } = null!;

    /// <summary>
    /// ID of the manager to be deleted.
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    private GetManagerDto? manager = null;
    private GetClubDto? club = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            manager = await ManagerService.GetManagerAsync(Id);
            club = await ClubService.GetClubAsync(manager.ClubId);
        }
        catch (ServiceException e)
        {
            await ErrorHandler.HandleAsync(e);
            await Modal.CancelAsync();
        }
    }

    private async Task DeleteManagerAsync()
    {
        try
        {
            await ManagerService.RemoveManagerAsync(Id);
        }
        catch (ServiceException e) { await ErrorHandler.HandleAsync(e); }

        await Modal.CloseAsync();
    }
}