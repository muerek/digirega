@page "/entries/new"
@attribute [Authorize(Roles = "Staff, Admin")]
@implements IDisposable

@inject IEntryService EntryService

<h1>Eingang</h1>
<p>
    Neu eingereichte Meldungen, über die entschieden werden muss.
</p>
<p class="small text-muted">
    <span class="oi oi-reload"></span> Automatisch aktualisiert, zuletzt @(lastRefresh?.ToString("HH:mm:ss") ?? "nie").
</p>

@if (entries == null)
{
    <LoadingSpinner />
}
else if (entries.Count == 0)
{
    <div class="alert alert-info">
        Noch keine Meldungen eingegangen.
    </div>
}
else
{
    <Virtualize Items="entries" Context="entry">
        <EntrySummary Entry="entry" @key="entry.Id" />
    </Virtualize>
}


@code {
    [CascadingParameter]
    ErrorHandler ErrorHandler { get; set; } = null!;

    private IList<GetEntryBriefDto>? entries = null;
    private DateTime? lastRefresh = null;

    private System.Timers.Timer refreshTimer = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch initial dataset, then set up a timer to do so regularly.
        await LoadEntriesAsync();

        refreshTimer.Interval = 5000;
        refreshTimer.Elapsed += OnRefreshAsync;
        refreshTimer.Start();
    }

    private async void OnRefreshAsync(object sender, EventArgs args)
    {
        await LoadEntriesAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadEntriesAsync()
    {
        try
        {
            entries = await EntryService.GetEntriesAsync(EntryStatus.New);
            lastRefresh = DateTime.Now;
        }
        catch (ServiceException e)
        {
            Dispose();
            await ErrorHandler.HandleAsync(e);
        }
    }

    public void Dispose()
    {
        refreshTimer.Elapsed -= OnRefreshAsync;
        refreshTimer.Stop();
    }
}
